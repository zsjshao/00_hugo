{"categories":[{"title":"go","uri":"https://www.zsjshao.net:1313/categories/go/"},{"title":"openstack","uri":"https://www.zsjshao.net:1313/categories/openstack/"}],"posts":[{"content":"Go 语言环境安装 Go 语言支持以下系统：\n Linux FreeBSD Mac OS X（也称为 Darwin） Window  安装包下载地址为：https://golang.org/dl/。需翻墙\nUNIX/Linux/Mac OS X, 和 FreeBSD 安装 以下介绍了在UNIX/Linux/Mac OS X, 和 FreeBSD系统下使用源码安装方法：\n1、下载源码包：go1.14.2.linux-amd64.tar.gz。\n2、将下载的源码包解压至 /usr/local目录。\n[root@ali ~]# tar xf go1.14.2.linux-amd64.tar.gz -C /usr/local/  添加环境变量\nexport PATH=$PATH:/usr/local/go/bin  Windows 系统下安装 Windows 下可以使用 .msi 后缀(在下载列表中可以找到该文件，如go1.14.2.windows-amd64.msi)的安装包来安装。\n默认情况下.msi文件会安装在 c:\\Go 目录下。安装后重启命令窗口。\n安装测试 创建工作目录 F:\\07-Go\n文件名: hello.go，代码如下：\npackage main import \u0026quot;fmt\u0026quot; func main() { fmt.Println(\u0026quot;Hello, World!\u0026quot;) }  使用 go 命令执行以上代码输出结果如下：\nF:\\07-Go\u0026gt;go run hello.go hello, world  学习方法\n需求、学、讲、用\n说的非常好，我一句都没听懂\ndos指令 命令帮助：command/?\nmd(mkdir) DIR\u0026hellip;：创建目录\nrd(rmdir) [/s/q] DIR：删除目录或删除目录及文件\ncd /d DIR：目录切换\ndir：列出当前目录下的文件及目录\ncopy(cp)：拷贝文件\nmove(mv)：移动或重命名文件\ndel(rm)：删除文件\ncls(clear)：清屏\nexit：退出\nren(rename)：批量修过文件名\ntype(cat)：查看文本文件\ntree：显示目录树\nGo变量 变量声明 1、指定变量类型，声明后若不赋值，使用默认值\nvar i int\n2、根据值自行判定变量类型（类型推导）\nvar num = 10.11\n3、省略var，注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误\nname := \u0026ldquo;zsjshao\u0026rdquo;\n4、多变量声明\n在编程中，有时我们需要一次性声明多个变量，Golang也提供这样的语法\nvar n1,n2,n3 int\nvar n1,name,n3 = 100,\u0026ldquo;zsjshao\u0026rdquo;,888\nn1,name,n3 := 100,\u0026ldquo;zsjshao\u0026rdquo;,888\n5、声明全局变量(函数外)\nvar n1 = 100\nvar n2 = 200\nvar name = \u0026ldquo;zsjshao\u0026rdquo;\n或\nvar (\nn1 = 100\nn2 = 200\nname = \u0026ldquo;zsjshao\u0026rdquo;\n)\n6、该区域的数据值可以在同一类型范围内不断变化\n7、变量在同一个作用域内不能同名\n8、变量=变量名+值+数据类型，变量的三要素\n9、Goland的变量如果没有赋初值，编译器会使用默认值\n程序中 + 号的作用 当左右两边为数值时，做加法运算\n当左右两边为字符串时，做字符串拼接，可换行，+号留在上一行\n变量的数据类型 基本数据类型 数值型 整数类型(int,int8,int16,int32(rune（unicode）),int64,uint,uint8(byte),uint16,uint32,uint64) 在使用整形变量时，遵守保小不保大的原则，即尽量使用占用空间小的数据类型 浮点类型（单精度:float32,双精度:float64） 浮点数=符号位+指数位+尾数位 尾数部分可能丢失，造成精度损失，尽量使用float64(默认类型)。-123.0000901 浮点数常量有十进制和科学计数法两种表示形式 512.34 5.1234e2 字符型(没有专门的字符型，使用byte来保存单个字母(ASCII)字符，汉字使用rune类型或int) Go默认使用UTF-8编码 英文字母占用一个字节，汉字占用3个字节 在go中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8编码的码值 字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码 263663246122522 布尔型(bool)，bool类型数据只允许取值true和false，不能使用0或1代替 bool类型占一个字节 字符串(string)由字符组成 字符串赋值后不可修改 字符串的两种表示形式 双引号，会识别转义字符 反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果  基本数据类型的默认值 int 0 float32 0 bool false string \u0026quot;\u0026quot;  基本数据类型的转换\n go在不同类型的变量之间赋值时需要显示转换 T(v)，其中T为type，v为变量 被转换的是变量的值，而非变量自身 小转大正常int8-\u0026gt;int16，大转小按溢出处理int16-\u0026gt;int8  基本数据类型和string的转换 基本数据类型转string\n1、fmt.Sprintf(\u0026quot;%参数\u0026rdquo;, 表达式)\n参数需要和表达式的数据类型想匹配\nfmt.Sprintf().. 会返回转换后的字符串\n2、使用strconv的函数\nstring转基本数据类型\n1、使用strconv的函数\n注意：转换时，要确保String类型能够转成有效的数据，若转换失败，其置为默认值\n派生/复杂数据类型 指针(Pointer) 数组() 结构体(struct) 管道(Channel) 函数 切片(slice) 接口(interface) map  指针 基本数据类型，变量存的就是值，也叫值类型\n获取变量的地址，用\u0026amp;，比如：var num int，获取num的地址：\u0026amp;num\n指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值，比如：var ptr *int = \u0026amp;num\n获取指针类型所指向的值，使用：*，比如：var ptr *int，使用*ptr获取获取ptr指向的值\n[root@ali project]# cat var.go package main import \u0026quot;fmt\u0026quot; func main() { name := \u0026quot;zsjshao\u0026quot; ptr := \u0026amp;name fmt.Println(\u0026quot;MyName =\u0026quot; ,*ptr,ptr,\u0026amp;ptr) } [root@ali project]# \\go run var.go MyName = zsjshao 0xc000010200 0xc00000e030  如何在程序中查看变量的占用字节大小和数据类型\nfmt.Printf(\u0026quot;\u0026quot;%T %d\u0026rdquo;,n1,unsafe.Sizeof(n1))\n值类型和引用类型的说明 值类型：基本数据类型int系列、float系列、bool、string、数组和结构体struct\n 变量直接存储值，内存通常在栈中分配  引用类型：指针、slice切片、map、管道chan、interface等都是引用类型\n 变量存储的是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收  取模\na % b = a - a / b * b\n原码、反码、补码 对于有符号的而言\n二进制的最高位是符号位：0表示正数，1表示负数\n正数的原码，反码，补码都一样\n负数的反码=原码符号位不变，其他位取反\n负数的补码=反码+1\n0的反码、补码都是0\n在计算机运算的时候，都是以补码的方式来运算\n位运算符 按位与\u0026amp; ：全为1则为1，否则为0\n按位或|：一个为1则为1，否则为0\n按位异或^：不同为1，相同为0\n移位运算符 右移运算符\u0026raquo;：低位溢出，符号位不变，并用符号位补溢出的高位\n左移运算符\u0026laquo;：符号位不变，低位补0\n程序流程控制 顺序控制\n分支控制\n循环控制\n","id":0,"section":"posts","summary":"Go 语言环境安装 Go 语言支持以下系统： Linux FreeBSD Mac OS X（也称为 Darwin） Window 安装包下载地址为：https://golang.org/dl/。需翻墙 UNIX/Linux/Mac","tags":["go"],"title":"go","uri":"https://www.zsjshao.net:1313/go/","year":"2019"},{"content":"初始环境 设备命名、角色及地址    名称 操作系统 IP地址 角色     controller1 CentOS 7.2 192.168.3.71192.168.101.71 控制节点   controller2 CentOS 7.2 192.168.3.72192.168.101.72 控制节点   compute1 CentOS 7.2 192.168.3.73192.168.101.73 计算节点   compute2 CentOS 7.2 192.168.3.74192.168.101.74 计算节点   mariadb1 CentOS 7.2 192.168.3.75192.168.101.75 mariadb master、rabbitmq cluster、memcached cluster   mariadb2 CentOS 7.2 192.168.3.76192.168.101.76 mariadb slave、rabbitmq cluster、memcached cluster   haproxy1 CentOS 8.1 192.168.3.81192.168.101.81vip:192.168.3.200vip:192.168.101.200 keepalived、haproxy   haproxy2 CentOS 8.1 192.168.3.81192.168.101.81vip:192.168.3.200vip:192.168.101.200 keepalived、haproxy    mariadb主/从 mariadb主 [root@mariadb1 ~]# yum install centos-release-openstack-queens -y [root@mariadb1 ~]# yum install mariadb-server -y [root@mariadb1 ~]# vim /etc/my.cnf.d/openstack.cnf ... [mysqld] bind-address = 192.168.101.75 default-storage-engine = innodb innodb_file_per_table = on max_connections = 4096 collation-server = utf8_general_ci character-set-server = utf8 log_bin=mysql-bin server_id=1 skip_name_resolve=ON [root@mariadb1 ~]# systemctl start mariadb [root@mariadb1 ~]# systemctl enable mariadb [root@mariadb1 ~]# mysql -e 'GRANT REPLICATION SLAVE ON *.* TO \u0026quot;repluser\u0026quot;@\u0026quot;192.168.101.76\u0026quot; IDENTIFIED BY \u0026quot;replpass\u0026quot;;' mariadb从 [root@mariadb2 ~]# yum install centos-release-openstack-queens -y [root@mariadb2 ~]# yum install mariadb-server -y [root@mariadb2 ~]# vim /etc/my.cnf.d/openstack.cnf ... [mysqld] bind-address = 192.168.101.76 default-storage-engine = innodb innodb_file_per_table = on max_connections = 4096 collation-server = utf8_general_ci character-set-server = utf8 server_id=2 read_only=ON skip_name_resolve=ON [root@mariadb2 ~]# systemctl start mariadb [root@mariadb2 ~]# systemctl enable mariadb [root@mariadb2 ~]# mysql -e 'change master to master_host=\u0026quot;192.168.101.75\u0026quot;,master_user=\u0026quot;repluser\u0026quot;,master_password=\u0026quot;replpass\u0026quot;,master_log_file=\u0026quot;mysql-bin.000001\u0026quot;,master_log_pos=512' [root@mariadb2 ~]# mysql -e 'start slave'  rabbitmq集群 [root@mariadb2 ~]# yum install rabbitmq-server -y [root@mariadb2 ~]# cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.101.75\tmariadb1 192.168.101.76\tmariadb2 [root@mariadb2 ~]# systemctl start rabbitmq-server [root@mariadb2 ~]# systemctl enable rabbitmq-server [root@mariadb2 ~]# rabbitmq-plugins enable rabbitmq_management [root@mariadb2 ~]# rabbitmqctl cluster_status [root@mariadb1 ~]# yum install rabbitmq-server -y [root@mariadb1 ~]# cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.101.75\tmariadb1 192.168.101.76\tmariadb2 [root@mariadb1 ~]# systemctl start rabbitmq-server [root@mariadb1 ~]# systemctl enable rabbitmq-server [root@mariadb1 ~]# rabbitmq-plugins enable rabbitmq_management [root@mariadb1 ~]# scp /var/lib/rabbitmq/.erlang.cookie 192.168.3.76:/var/lib/rabbitmq/ [root@mariadb1 ~]# rabbitmqctl stop_app [root@mariadb1 ~]# rabbitmqctl reset [root@mariadb1 ~]# rabbitmqctl join_cluster rabbit@mariadb2 --ram [root@mariadb1 ~]# rabbitmqctl start_app [root@mariadb1 ~]# rabbitmqctl cluster_status [root@mariadb1 ~]# rabbitmqctl set_policy ha-all \u0026quot;#\u0026quot; '{\u0026quot;ha-mode\u0026quot;:\u0026quot;all\u0026quot;}' [root@mariadb1 ~]# rabbitmqctl add_user openstack openstack [root@mariadb1 ~]# rabbitmqctl set_permissions openstack \u0026quot;.*\u0026quot; \u0026quot;.*\u0026quot; \u0026quot;.*\u0026quot;  memcached集群 [root@mariadb1 ~]# yum install memcached libevent libevent-devel -y [root@mariadb1 src]# wget https://sourceforge.net/projects/repcached/files/repcached/2.2.1-1.2.8/memcached-1.2.8-repcached-2.2.1.tar.gz [root@mariadb1 src]# tar xf memcached-1.2.8-repcached-2.2.1.tar.gz [root@mariadb1 src]# cd memcached-1.2.8-repcached-2.2.1/ [root@mariadb1 memcached-1.2.8-repcached-2.2.1]# ./configure --prefix=/usr/local/repached --enable-replication [root@mariadb1 memcached-1.2.8-repcached-2.2.1]# vim memcached.c 修改前 /* FreeBSD 4.x doesn't have IOV_MAX exposed. */ #ifndef IOV_MAX #if defined(__FreeBSD__) || defined(__APPLE__) # define IOV_MAX 1024 #endif #endif 修改后 /* FreeBSD 4.x doesn't have IOV_MAX exposed. */ #ifndef IOV_MAX # define IOV_MAX 1024 #endif [root@mariadb1 memcached-1.2.8-repcached-2.2.1]# make \u0026amp;\u0026amp; make install [root@mariadb1 ~]# /usr/local/repached/bin/memcached -d -m 2048 -p 11211 -u root -c 2048 -x 192.168.101.76 [root@mariadb1 ~]# vim /etc/rc.d/rc.local ... /usr/local/repached/bin/memcached -d -m 2048 -p 11211 -u root -c 2048 -x 192.168.101.76 [root@mariadb1 ~]# chmod +x /etc/rc.d/rc.local [root@mariadb1 ~]# scp /usr/local/src/memcached-1.2.8-repcached-2.2.1.tar.gz 192.168.101.76:/usr/local/src [root@mariadb2 src]# tar xf memcached-1.2.8-repcached-2.2.1.tar.gz [root@mariadb2 src]# cd memcached-1.2.8-repcached-2.2.1/ [root@mariadb2 memcached-1.2.8-repcached-2.2.1]# ./configure --prefix=/usr/local/repached --enable-replication [root@mariadb2 memcached-1.2.8-repcached-2.2.1]# vim memcached.c 修改前 /* FreeBSD 4.x doesn't have IOV_MAX exposed. */ #ifndef IOV_MAX #if defined(__FreeBSD__) || defined(__APPLE__) # define IOV_MAX 1024 #endif #endif 修改后 /* FreeBSD 4.x doesn't have IOV_MAX exposed. */ #ifndef IOV_MAX # define IOV_MAX 1024 #endif [root@mariadb2 memcached-1.2.8-repcached-2.2.1]# make \u0026amp;\u0026amp; make install [root@mariadb2 memcached-1.2.8-repcached-2.2.1]# /usr/local/repached/bin/memcached -d -m 2048 -p 11211 -u root -c 2048 -x 192.168.101.75 [root@mariadb1 ~]# vim /etc/rc.d/rc.local ... /usr/local/repached/bin/memcached -d -m 2048 -p 11211 -u root -c 2048 -x 192.168.101.76 [root@mariadb1 ~]# chmod +x /etc/rc.d/rc.local  时间同步 控制节点 [root@controller1 ~]# yum install chrony -y [root@controller1 ~]# vim /etc/chrony.conf ... allow 192.168.3.0/24 allow 192.168.101.0/24 [root@controller1 ~]# systemctl start chronyd [root@controller1 ~]# systemctl enable chronyd 其他节点 [root@controller2 ~]# yum install chrony -y [root@controller2 ~]# vim /etc/chrony.conf ... server 192.168.101.71 iburst [root@controller2 ~]# systemctl start chronyd [root@controller2 ~]# systemctl enable chronyd  keepalived [root@haproxy1 ~]# dnf install keepalived -y [root@haproxy1 ~]# cat /etc/keepalived/keepalived.conf ! Configuration File for keepalived global_defs { notification_email { root@zsjshao.net } notification_email_from keepalived@zsjshao.net smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id c81 vrrp_skip_check_adv_addr vrrp_strict vrrp_iptables vrrp_garp_interval 0 vrrp_gna_interval 0 } vrrp_instance VI_1 { state MASTER interface br1 virtual_router_id 51 priority 100 advert_int 1 authentication { auth_type PASS auth_pass 123456 } virtual_ipaddress { 192.168.101.200 dev br1 label br1:0 } } vrrp_instance VI_2 { state BACKUP interface br2 virtual_router_id 52 priority 80 advert_int 1 authentication { auth_type PASS auth_pass 123456 } virtual_ipaddress { 192.168.3.200 dev br2 label br2:0 } } [root@haproxy1 ~]# systemctl start keepalived [root@haproxy1 ~]# systemctl enable keepalived [root@haproxy2 ~]# dnf install keepalived -y [root@haproxy2 ~]# cat /etc/keepalived/keepalived.conf ! Configuration File for keepalived global_defs { notification_email { root@zsjshao.net } notification_email_from keepalived@zsjshao.net smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id c82 vrrp_skip_check_adv_addr vrrp_strict vrrp_iptables vrrp_garp_interval 0 vrrp_gna_interval 0 } vrrp_instance VI_1 { state BACKUP interface br1 virtual_router_id 51 priority 80 advert_int 1 authentication { auth_type PASS auth_pass 123456 } virtual_ipaddress { 192.168.101.200 dev br1 label br1:0 } } vrrp_instance VI_2 { state MASTER interface br2 virtual_router_id 52 priority 100 advert_int 1 authentication { auth_type PASS auth_pass 123456 } virtual_ipaddress { 192.168.3.200 dev br2 label br2:0 } } [root@haproxy2 ~]# systemctl start keepalived [root@haproxy2 ~]# systemctl enable keepalived  haproxy [root@c81 ~]# dnf install haproxy [root@haproxy1 ~]# cat /etc/haproxy/haproxy.cfg global maxconn 100000 # chroot /usr/local/haproxy #stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin uid 995 gid 992 daemon nbproc 4 cpu-map 1 0 cpu-map 2 1 cpu-map 3 2 cpu-map 4 3 pidfile /var/run/haproxy.pid log 127.0.0.1 local3 info defaults option http-keep-alive option forwardfor maxconn 100000 mode http timeout connect 300000ms timeout client 300000ms timeout server 300000ms listen stats bind :9999 stats enable stats hide-version stats uri /haproxy-status stats realm HAPorxy\\Stats\\Page stats auth haadmin:123456 stats refresh 30s stats admin if TRUE listen dashboard_ex_80 bind 192.168.3.200:80 mode tcp server web1 192.168.3.71:80 check inter 3000 fall 2 rise 5 server web2 192.168.3.72:80 check inter 3000 fall 2 rise 5 listen dashboard_in_80 bind 192.168.101.200:80 mode tcp server web1 192.168.101.71:80 check inter 3000 fall 2 rise 5 server web2 192.168.101.72:80 check inter 3000 fall 2 rise 5 listen mariadb_3306 bind 192.168.101.200:3306 mode tcp server mariadb1 192.168.101.75:3306 check inter 3000 fall 2 rise 5 server mariadb2 192.168.101.76:3306 check inter 3000 fall 2 rise 5 backup listen rabbitmq_5672 bind 192.168.101.200:5672 mode tcp balance source server rabbitmq1 192.168.101.75:5672 check inter 3000 fall 2 rise 5 server rabbitmq2 192.168.101.76:5672 check inter 3000 fall 2 rise 5 listen rabbitmq_web_15672 bind 192.168.3.200:15672 mode tcp balance source server rabbitmq1 192.168.3.75:15672 check inter 3000 fall 2 rise 5 server rabbitmq2 192.168.3.76:15672 check inter 3000 fall 2 rise 5 listen memcached_11211 bind 192.168.101.200:11211 mode tcp balance source server memcached1 192.168.101.75:11211 check inter 3000 fall 2 rise 5 server memcached2 192.168.101.76:11211 check inter 3000 fall 2 rise 5 listen keystone_5000 bind 192.168.101.200:5000 mode tcp server controller1 192.168.101.71:5000 check inter 3000 fall 2 rise 5 server controller2 192.168.101.72:5000 check inter 3000 fall 2 rise 5 listen keystone_35357 bind 192.168.101.200:35357 mode tcp server controller1 192.168.101.71:35357 check inter 3000 fall 2 rise 5 server controller2 192.168.101.72:35357 check inter 3000 fall 2 rise 5 listen glance_9292 bind 192.168.101.200:9292 mode tcp server controller1 192.168.101.71:9292 check inter 3000 fall 2 rise 5 server controller2 192.168.101.72:9292 check inter 3000 fall 2 rise 5 listen nova_8774 bind 192.168.101.200:8774 mode tcp server nova1 192.168.101.71:8774 check inter 3000 fall 2 rise 5 server nova2 192.168.101.72:8774 check inter 3000 fall 2 rise 5 listen metadata_8775 bind 192.168.101.200:8775 mode tcp server metadata1 192.168.101.71:8775 check inter 3000 fall 2 rise 5 server metadata2 192.168.101.72:8775 check inter 3000 fall 2 rise 5 listen placement_8778 bind 192.168.101.200:8778 mode tcp server placement1 192.168.101.71:8778 check inter 3000 fall 2 rise 5 server placement2 192.168.101.72:8778 check inter 3000 fall 2 rise 5 listen nova_vnc_6080 bind 192.168.101.200:6080 mode tcp server nova_vnc1 192.168.101.71:6080 check inter 3000 fall 2 rise 5 server nova_vnc2 192.168.101.72:6080 check inter 3000 fall 2 rise 5 listen neutron_9696 bind 192.168.101.200:9696 mode tcp server neutron1 192.168.101.71:9696 check inter 3000 fall 2 rise 5 server neutron2 192.168.101.72:9696 check inter 3000 fall 2 rise 5 [root@c81 ~]# systemctl start haproxy [root@c81 ~]# systemctl enable haproxy  etcd [root@controller1 ~]# yum install etcd -y [root@controller1 ~]# grep -v ^# /etc/etcd/etcd.conf ETCD_DATA_DIR=\u0026quot;/var/lib/etcd/default.etcd\u0026quot; ETCD_LISTEN_PEER_URLS=\u0026quot;http://192.168.101.71:2380,http://127.0.0.1:2380\u0026quot; ETCD_LISTEN_CLIENT_URLS=\u0026quot;http://192.168.101.71:2379,http://127.0.0.1:2379\u0026quot; ETCD_NAME=\u0026quot;controller1\u0026quot; ETCD_INITIAL_ADVERTISE_PEER_URLS=\u0026quot;http://192.168.101.71:2380\u0026quot; ETCD_ADVERTISE_CLIENT_URLS=\u0026quot;http://192.168.101.71:2379\u0026quot; ETCD_INITIAL_CLUSTER=\u0026quot;controller1=http://192.168.101.71:2380,controller2=http://192.168.101.72:2380\u0026quot; ETCD_INITIAL_CLUSTER_TOKEN=\u0026quot;etcd-cluster\u0026quot; ETCD_INITIAL_CLUSTER_STATE=\u0026quot;new\u0026quot; [root@controller1 ~]# systemctl start etcd [root@controller1 ~]# systemctl enable etcd [root@controller2 ~]# yum install etcd -y [root@controller2 ~]# grep -v ^# /etc/etcd/etcd.conf ETCD_DATA_DIR=\u0026quot;/var/lib/etcd/default.etcd\u0026quot; ETCD_LISTEN_PEER_URLS=\u0026quot;http://192.168.101.72:2380,http://127.0.0.1:2380\u0026quot; ETCD_LISTEN_CLIENT_URLS=\u0026quot;http://192.168.101.72:2379,http://127.0.0.1:2379\u0026quot; ETCD_NAME=\u0026quot;controller2\u0026quot; ETCD_INITIAL_ADVERTISE_PEER_URLS=\u0026quot;http://192.168.101.72:2380\u0026quot; ETCD_ADVERTISE_CLIENT_URLS=\u0026quot;http://192.168.101.72:2379\u0026quot; ETCD_INITIAL_CLUSTER=\u0026quot;controller1=http://192.168.101.71:2380,controller2=http://192.168.101.72:2380\u0026quot; ETCD_INITIAL_CLUSTER_TOKEN=\u0026quot;etcd-cluster\u0026quot; ETCD_INITIAL_CLUSTER_STATE=\u0026quot;existing\u0026quot; [root@controller2 ~]# systemctl start etcd [root@controller2 ~]# systemctl enable etcd [root@controller1 ~]# etcdctl member list 436615ac15609671: name=controller2 peerURLs=http://192.168.101.72:2380 clientURLs=http://192.168.101.72:2379 isLeader=true 74492978ad38fdfd: name=controller1 peerURLs=http://192.168.101.71:2380 clientURLs=http://192.168.101.71:2379 isLeader=false  各节点添加yum源，安装OpenStack客户端 [root@controller1 ~]# yum install centos-release-openstack-queens -y [root@controller1 ~]# yum install python-openstackclient python-memcached -y 若启用SELinux，需安装openstack-selinux软件包以自动管理openstack服务的安全策略 # yum install openstack-selinux -y  ","id":1,"section":"posts","summary":"初始环境 设备命名、角色及地址 名称 操作系统 IP地址 角色 controller1 CentOS 7.2 192.168.3.71192.168.101.71 控制节点 controller2 CentOS 7.2 192.168.3.72192.168.101.72 控制节点 compute1 CentOS 7.2 192.168.3.73192.168.101.73 计算节点 compute2 CentOS 7.2 192.168.3.74192.168.101.74 计算节点 mariadb1 CentOS 7.2 192.168.3.75192.168.101.75 mariadb master、","tags":["openstack"],"title":"openstack","uri":"https://www.zsjshao.net:1313/1openstack-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/","year":"2019"},{"content":"openstack简介 1、云计算与openstack IT系统架构的发展过程图\nIT系统架构的发展到目前为止大致可以分为3个阶段：\n物理机架构 这一阶段，应用部署和运行在物理机上。 比如企业要上一个ERP系统，如果规模不大，可以找3台物理机，分别部署Web服务器、应用服务器和数据库服务器。 如果规模大一点，各种服务器可以采用集群架构，但每个集群成员也还是直接部署在物理机上。这种架构，一套应用一套服务器，通常系统的资源使用率都很低，达到20%的都是好的。\n虚拟化架构 摩尔定律决定了物理服务器的计算能力越来越强，虚拟化技术的发展大大提高了物理服务器的资源使用率。 这个阶段，物理机上运行若干虚拟机，应用系统直接部署到虚拟机上。 虚拟化的好处还体现在减少了需要管理的物理机数量，同时节省了维护成本。\n云计算架构 虚拟化提高了单台物理机的资源使用率，随着虚拟化技术的应用，IT环境中有越来越多的虚拟机，这时新的需求产生了： 如何对IT环境中的虚拟机进行统一和高效的管理。 有需求就有供给，云计算登上了历史舞台。\n计算（CPU/内存）、存储和网络是 IT 系统的三类资源。 通过云计算平台，这三类资源变成了三个池子 当需要虚机的时候，只需要向平台提供虚机的规格。 平台会快速从三个资源池分配相应的资源，部署出这样一个满足规格的虚机。 虚机的使用者不再需要关心虚机运行在哪里，存储空间从哪里来，IP是如何分配，这些云平台都搞定了。\n云平台是一个面向服务的架构，按照提供服务的不同分为 IaaS、PaaS 和 SaaS。\nIaaS（Infrastructure as a Service）提供的服务是虚拟机。 IaaS 负责管理虚机的生命周期，包括创建、修改、备份、启停、销毁等。 使用者从云平台得到的是一个已经安装好镜像（操作系统+其他预装软件）的虚拟机。 使用者需要关心虚机的类型（OS）和配置（CPU、内存、磁盘），并且自己负责部署上层的中间件和应用。 IaaS 的使用者通常是数据中心的系统管理员。 典型的 IaaS 例子有 AWS、阿里云等。\nPaaS（Platform as a Service）提供的服务是应用的运行环境和一系列中间件服务（比如数据库、消息队列等）。 使用者只需专注应用的开发，并将自己的应用和数据部署到PaaS环境中。 PaaS负责保证这些服务的可用性和性能。 PaaS的使用者通常是应用的开发人员。 典型的 PaaS 有 Heroku、Google App Engine、IBM BlueMix 等。\nSaaS（Software as a Service）提供的是应用服务。 使用者只需要登录并使用应用，无需关心应用使用什么技术实现，也不需要关系应用部署在哪里。 SaaS的使用者通常是应用的最终用户。 典型的 SaaS 有 Google Gmail、Salesforce 等。\n2、什么是OpensStack？ What is OpenStack? OpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface.\n以上是官网对 OpenStack 的定义，OpenStack 对数据中心的计算、存储和网络资源进行统一管理。 由此可见，OpenStack 针对的是 IT 基础设施，是 IaaS 这个层次的云操作系统。\n以下是openstack架构图\nOpenStack覆盖了网络、虚拟化、操作系统、服务器等各个方面，主要由以下11个核心项目组成。\nKeystone：身份服务（Identity Service）。为OpenStack其他服务提供身份认证、服务规则、服务令牌的功能和管理用户、帐号和角色信息服务，并为对象存储提供授权服务。可以作为OpenStack的统一认证的组件。 Nova：计算（Compute）。一套控制器，用于为单个用户或使用群组管理虚拟机实例的整个生命周期，根据用户需求来提供虚拟服务。负责虚拟机的创建、开机、挂起、暂停、重启、关机、调整、迁移、销毁等操作，配置CPU、内存、硬盘等信息规格。 Glance：镜像服务（Image Service）。一套虚拟机镜像查找及检索系统，支持多种虚拟机镜像格式（AKI、AMI、ARI、ISO、QCOW2、Raw、VDI、VHD、VMDK），有创建上传镜像、删除镜像、编辑镜像基本信息的功能。 Neutron：网络管理（Network）。提供云计算的网络虚拟化技术，为OpenStack其他服务提供网络连接服务。为用户提供接口，可以定义Network、Subnet、Router，配置DHCP、DNS、负载均衡、L3服务，网络支持GRE、VLAN。插件架构支持许多主流的网络厂家和技术，如OpenvSwitch。 Cinder：块存储 (Block Storage)。为运行实例提供数据块存储服务，它的插件驱动架构有利于块设备的创建和管理，如创建卷、删除卷，在实例上挂载和卸载卷。多个卷可以被挂载到单一虚拟机实例，同时卷可以在虚拟机实例间移动，单个卷在同一时刻只能被挂载到一个虚拟机实例。Cinder主要核心是对卷的管理，允许对卷、卷的类型、卷的快照进行处理。它并没有实现对块设备的管理和实际服务，而是为后端不同的存储结构提供了统一的接口，不同的块设备服务厂商在 Cinder 中实现其驱动支持以与 OpenStack 进行整合。 Swift：对象存储（Object Storage）。提供对象存储的功能，对象存储的核心是将数据通路（数据读或写）和控制通路（元数据）分离，并且基于对象存储设备（Object-based Storage Device，OSD）构建存储系统，每个对象存储设备具有一定的智能，能够自动管理其上的数据分布。可为Glance提供镜像存储，为Cinder提供卷备份服务。 Horizon：UI界面 (Dashboard)。在整个Openstack应用体系框架中，Horizon就是整个应用的入口。它提供了一个模块化的，基于web的图形化界面服务门户。用户可以通过浏览器使用这个Web图形化界面来访问、控制他们的计算、存储和网络资源，如启动实例、分配IP地址、设置访问控制等。 Ceilometer：测量 (Metering)。像一个漏斗一样，能把OpenStack内部发生的几乎所有的事件都收集起来，然后为计费和监控以及其它服务提供数据支撑。 Heat：部署编排 (Orchestration)。提供了一种通过模板定义的协同部署方式，实现云基础设施软件运行环境（计算、存储和网络资源）的自动化部署。 Trove：数据库服务（Database Service）。为用户在OpenStack的环境提供可扩展和可靠的关系和非关系数据库引擎服务。 Sahara：旨在使用户能够在Openstack平台上便于创建和管理Hadoop以及其他计算框架集群，实现类似AWS的EMR（Amazon Elastic MapReduce service）服务。  ","id":2,"section":"posts","summary":"openstack简介 1、云计算与openstack IT系统架构的发展过程图 IT系统架构的发展到目前为止大致可以分为3个阶段： 物理机架构 这一","tags":["openstack"],"title":"openstack","uri":"https://www.zsjshao.net:1313/2openstack-%E7%AE%80%E4%BB%8B/","year":"2019"}],"tags":[{"title":"go","uri":"https://www.zsjshao.net:1313/tags/go/"},{"title":"openstack","uri":"https://www.zsjshao.net:1313/tags/openstack/"}]}